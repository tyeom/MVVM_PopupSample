<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:MVVM_PopupSample.Converters"
                    xmlns:ct="clr-namespace:MVVM_PopupSample.Controls">

    <converter:EnumToVisibilityConverter x:Key="EnumToVisConverter" />
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />

    <Style TargetType="{x:Type ct:MessagePopUpBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ct:MessagePopUpBox}">
                    <!--별도 Popup이 표시 된 상태에서도 항상 최상위에 표시 되도록 Popup으로 감쌈-->
                    <!--NOTE : Popup컨트롤은 실제 화면 사이즈의 최대 75%이상은 커버할 수 없어서 그 이상 사이즈가 넘어가면 Popup이 짤린다.-->
                    <!--전체 화면 등에서 사용할 경우 IsBackgroundDisable속성을 true로 설정하고 사용하는 쪽에서 수동으로 Background처리를 해서 뒤 영역이 클릭되지 않도록 처리해야 한다.-->
                    <Popup x:Name="xMsgPopUp"
                           Visibility="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
                           Placement="Center"
                           PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                           AllowsTransparency="True">
                        <Popup.Style>
                            <Style TargetType="Popup">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                        <Setter Property="IsOpen" Value="False" />
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="IsOpen" Value="True" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Popup.Style>

                        <Grid x:Name="xMsgGrid"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch">
                            <Grid Background="#FF000000"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Opacity="0.5">
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                    <Condition Binding="{Binding Path=IsBackgroundDisable, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                            </Grid>

                            <Border RenderTransformOrigin="0.5,0.5">

                                <!--팝업 창 효과 Style-->
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>

                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                                <!--팝업 창 효과 Style END-->

                                <Border.RenderTransform>
                                    <ScaleTransform x:Name="xBorderScale" ScaleX="0" ScaleY="0" />
                                </Border.RenderTransform>

                                <!--팝업 컨텐츠 Width Size : 600Fix-->
                                <Border Background="#FFFFFFFF"
                                        CornerRadius="17"
                                        Padding="5"
                                        MinWidth="600"
                                        VerticalAlignment="{Binding Path=VAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                        HorizontalAlignment="{Binding Path=HAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Border Grid.RowSpan="3"
                                            Background="#FFFFFFFF" />

                                        <Image Grid.Row="0"
                                               Stretch="None"
                                               Margin="0, 20, 0, 0">
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=MessagePopUpIconType, RelativeSource={RelativeSource TemplatedParent}}" Value="None">
                                                            <Setter Property="Source" Value="/MVVM_PopupSample;component/Images/lightbulb-alert.png" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=MessagePopUpIconType, RelativeSource={RelativeSource TemplatedParent}}" Value="Warning">
                                                            <Setter Property="Source" Value="/MVVM_PopupSample;component/Images/alert-circle.png" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=MessagePopUpIconType, RelativeSource={RelativeSource TemplatedParent}}" Value="Error">
                                                            <Setter Property="Source" Value="/MVVM_PopupSample;component/Images/alert-circle.png" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=MessagePopUpIconType, RelativeSource={RelativeSource TemplatedParent}}" Value="Info">
                                                            <Setter Property="Source" Value="/MVVM_PopupSample;component/Images/alert-circle.png" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>

                                        <ContentPresenter Grid.Row="1"
                                                          Margin="0, 20, 0, 0" />

                                        <StackPanel x:Name="xYesNoMessageBox"
                                                    Grid.Row="2"
                                                    Orientation="Horizontal"
                                                    HorizontalAlignment="Center"
                                                    Visibility="{Binding Path=MessagePopUpBoxType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EnumToVisConverter}, ConverterParameter=YesNo}"
                                                    Margin="30, 30, 30, 30">
                                            <Border Background="{Binding NoBtnColor, RelativeSource={RelativeSource TemplatedParent}}"
                                                    CornerRadius="17"
                                                    Margin="0, 0, 20, 0">
                                                <Button x:Name="xNoBtn"
                                                        Width="200"
                                                        Height="100"
                                                        HorizontalAlignment="Center"
                                                        Background="Transparent"
                                                        Foreground="#FFFFFFFF"
                                                        FontSize="32"
                                                        FontWeight="Bold"
                                                        Command="{Binding NoCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                        CommandParameter="{Binding NoCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Margin="0, 0, 0, 0"
                                                        Style="{DynamicResource NormalButtonStyle}">
                                                    <TextBlock Text="{Binding Path=NoText, RelativeSource={RelativeSource TemplatedParent}}"
                                                               HorizontalAlignment="Center"
                                                               VerticalAlignment="Center" />
                                                </Button>
                                            </Border>

                                            <Border Background="{Binding YesBtnColor, RelativeSource={RelativeSource TemplatedParent}}"
                                                    CornerRadius="17"
                                                    Margin="0, 0, 0, 0">
                                                <Button x:Name="xYesBtn"
                                                        Width="200"
                                                        Height="100"
                                                        HorizontalAlignment="Center"
                                                        Background="Transparent"
                                                        Foreground="#FFFFFFFF"
                                                        FontSize="32"
                                                        FontWeight="Bold"
                                                        Command="{Binding YesCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                        CommandParameter="{Binding YesCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Margin="0, 0, 10, 0"
                                                        Style="{DynamicResource NormalButtonStyle}">
                                                    <TextBlock Text="{Binding Path=YesText, RelativeSource={RelativeSource TemplatedParent}}"
                                                               HorizontalAlignment="Center"
                                                               VerticalAlignment="Center" />
                                                </Button>
                                            </Border>
                                        </StackPanel>

                                        <StackPanel x:Name="xOKMessageBox"
                                                    Grid.Row="2"
                                                    Orientation="Horizontal"
                                                    HorizontalAlignment="Center"
                                                    Visibility="{Binding Path=MessagePopUpBoxType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EnumToVisConverter}, ConverterParameter=Confirm}"
                                                    Margin="30, 30, 30, 30">
                                            <Border Background="{Binding YesBtnColor, RelativeSource={RelativeSource TemplatedParent}}"
                                                    CornerRadius="17"
                                                    HorizontalAlignment="Stretch"
                                                    Margin="0, 0, 0, 0">
                                                <Button x:Name="xOKBtn"
                                                        Width="200"
                                                        Height="100"
                                                        HorizontalAlignment="Center"
                                                        Background="Transparent"
                                                        Foreground="#FFFFFFFF"
                                                        FontSize="32"
                                                        FontWeight="Bold"
                                                        Command="{Binding ConfirmCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                        CommandParameter="{Binding ConfirmCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Margin="0, 0, 10, 0"
                                                        Style="{DynamicResource NormalButtonStyle}">
                                                    <TextBlock Text="{Binding Path=ConfirmText, RelativeSource={RelativeSource TemplatedParent}}"
                                                               HorizontalAlignment="Center"
                                                               VerticalAlignment="Center" />
                                                </Button>
                                            </Border>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </Border>
                        </Grid>
                    </Popup>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ct:IconButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ct:IconButton}">
                    <Border x:Name="buttonBorder">
                        <Border.Effect>
                            <DropShadowEffect Opacity="0.0" />
                        </Border.Effect>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Image x:Name="xIonImg"
                                   Grid.Column="0"
                                   Source="{Binding IconImage, RelativeSource={RelativeSource TemplatedParent}}"
                                   Stretch="None"
                                   Margin="0, 0, 10, 0" />

                            <TextBlock x:Name="xText"
                                       Grid.Column="1"
                                       VerticalAlignment="Center"
                                       Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}">
                            </TextBlock>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>